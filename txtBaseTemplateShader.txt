Shader "Unlit/MatrixRainV1"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        PROPERTIESPLACEHOLDER
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            sampler2D _MainTex;
            float4 _MainTex_ST;

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            #define iResolution _ScreenParams
            #define mod(x, y) (x-y*floor(x/y) )

            float random(float2 v) {
                return frac(sin(v.x * 32.1231 - v.y * 2.334 + 13399.2312) * 2412.32312);
            }
            float random(float x, float y) {
                return frac(sin(x * 32.1231 - y * 2.334 + 13399.2312) * 2412.32312);
            }
            float random(float x) {
                return frac(sin(x * 32.1231 + 13399.2312) * 2412.32312);
            }

            float hue2rgb(float f1, float f2, float hue) {
                if (hue < 0.0)
                    hue += 1.0;
                else if (hue > 1.0)
                    hue -= 1.0;
                float res;
                if ((6.0 * hue) < 1.0)
                    res = f1 + (f2 - f1) * 6.0 * hue;
                else if ((2.0 * hue) < 1.0)
                    res = f2;
                else if ((3.0 * hue) < 2.0)
                    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
                else
                    res = f1;
                return res;
            }

            float3 hsl2rgb(float3 hsl) {
                float3 rgb;


                if (hsl.y == 0.0) {
                    rgb = float3(hsl.z, hsl.z, hsl.z); // Luminance
                }
                else {
                    float f2;

                    if (hsl.z < 0.5)
                        f2 = hsl.z * (1.0 + hsl.y);
                    else
                        f2 = hsl.z + hsl.y - hsl.y * hsl.z;

                    float f1 = 2.0 * hsl.z - f2;

                    rgb.r = 0.0; // hue2rgb(f1, f2, hsl.x + (1.0/3.0));
                    rgb.g = cos(hue2rgb(f1, f2, hsl.x));
                    rgb.b = 0.0; // hue2rgb(f1, f2, hsl.x - (1.0/3.0));
                }
                return rgb;
            }

            float character(float i) {
                return i < 15.01 ? floor(random(i) * 32768.) : 0.;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                float2 fragCoord = i.uv;

                float2 S = 15. * float2(3., 2.);
                float2 coord = float2(
                    fragCoord.x / iResolution.y,
                    fragCoord.y / iResolution.y + (iResolution.y - iResolution.x) / (9. * iResolution.y)
                );
                float2 c = floor(coord * S);

                float offset = random(c.x) * S.x;
                float speed = random(c.x * 3.) * 1. + 0.2;
                float len = random(c.x) * 15. + 10.;
                float u = 1. - frac(c.y / len + _Time.y * speed + offset) * 2.;

                float padding = 2.;
                float2 smS = float2(3., 5.);
                float2 sm = floor(frac(coord * S) * (smS + float2(padding, padding))) - float2(padding, padding);
                float symbol = character(floor(random(c + floor(_Time.y * speed)) * 15.));
                bool s = sm.x < 0. || sm.x > smS.x || sm.y < 0. || sm.y > smS.y ? false
                    : mod(floor(symbol / pow(2., sm.x + sm.y * smS.x)), 2.) == 1.;

                float3 curRGB = hsl2rgb(float3(c.x / S.x, 1., 0.5));
                if (u > 0.9)
                {
                    curRGB.r = 1.0;
                    curRGB.g = 1.0;
                    curRGB.b = 1.0;
                }

                return float4(s ? curRGB * u : float3(0.0, 0.0, 0.0 ), 1.); // float4(text(i.uv) * rain(i.uv), 1.0);
            }

            ENDCG
        }
    }
}
